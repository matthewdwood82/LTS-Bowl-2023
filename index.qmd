---
title: "LTS Bowl 2023"
author: "Matt Wood"
format: html
editor: visual
execute:
  echo: false
  warning: false
---

```{r dependencies}

# data ingest
library(ffscrapr)
# library(googlesheets4)
library(curl)

# data munging
library(dplyr)
library(tidyr)
library(stringr)
library(lubridate)
library(purrr)

# data display and interaction
library(DT)
# library(shinyWidgets)

lts_conn <- c(
    "869072831982559232",
    "859524057538887680",
    "869073624508891136",
    "869073848140800000",
    "866166165288939520"
  ) %>%
  purrr::set_names("L1", "L2", "L3", "L4", "L5") %>%
  purrr::map(.x = .,
             ~ ff_connect(
               league_id = .x,
               platform = "sleeper",
               season = 2022
             ))
```

## Intro

Welcome to the scoring and transaction site for the Living the Stream Bowl 2023!

## Bylaws

Bylaws for the league are available here, email [LTS commish Greg Bryant](mailto:lts.leaguecommish@gmail.com) for access: [2023 bylaws](https://docs.google.com/document/d/1TVPnjUtb53mUAFtjFjvf8bk0E9AB4-FsHYxE8VFWiss/edit)

## Scoring

### Weekly Report

```{r weekly_report}

# get all franchise names and ids for all leagues
df_franchises <- purrr::map(lts_conn, ~ ff_franchises(.x)) %>% 
  dplyr::bind_rows(.id = "league")

# get all scores for each week
df_scores <- purrr::map(lts_conn, ~ ff_schedule(.x)) %>%
  dplyr::bind_rows(.id = "league") %>% 
  dplyr::mutate(diff_score = abs(franchise_score - opponent_score)) %>% 
  dplyr::left_join(df_franchises[,1:4], by = c("league", "franchise_id")) %>% 
  dplyr::left_join(df_franchises[,1:4], by = c("league" = "league", "opponent_id" = "franchise_id"), suffix = c("", "_opponent"))

# define weekly categories so we can sort by ordered list in full df_weekly later
v_category <- ordered(c("Biggest Blowout", "Narrowest Win", "Fewest Points in Win", "Most Points in Loss", "Highest Score", "Lowest Score"))

df_weekly_blowout <- df_scores %>%
  dplyr::group_by(week) %>%
  dplyr::filter(result == "W", diff_score == max(diff_score)) %>%
  dplyr::ungroup() %>% 
  dplyr::mutate(Category = v_category[1]) %>% 
  dplyr::select(Week = week, Category, League = league, Awardee = franchise_name, Opponent = franchise_name_opponent, `Awardee Score` = franchise_score, `Opponent Score` = opponent_score, Difference = diff_score)
  
df_weekly_narrow_win <- df_scores %>%
  dplyr::group_by(week) %>%
  dplyr::filter(result == "W", diff_score == min(diff_score)) %>%
  dplyr::ungroup() %>% 
  dplyr::mutate(Category = v_category[2]) %>% 
  dplyr::select(Week = week, Category, League = league, Awardee = franchise_name, Opponent = franchise_name_opponent, `Awardee Score` = franchise_score, `Opponent Score` = opponent_score, Difference = diff_score)

df_weekly_fewest_points_win <- df_scores %>%
  dplyr::group_by(week) %>%
  dplyr::filter(result == "W") %>%
  dplyr::filter(franchise_score == min(franchise_score)) %>% 
  dplyr::ungroup() %>% 
  dplyr::mutate(Category = v_category[3]) %>% 
  dplyr::select(Week = week, Category, League = league, Awardee = franchise_name, Opponent = franchise_name_opponent, `Awardee Score` = franchise_score, `Opponent Score` = opponent_score, Difference = diff_score)

df_weekly_most_points_loss <- df_scores %>%
  dplyr::group_by(week) %>%
  dplyr::filter(result == "L", opponent_score == max(opponent_score)) %>%
  dplyr::ungroup() %>% 
  dplyr::mutate(Category = v_category[4]) %>% 
  dplyr::select(Week = week, Category, League = league, Awardee = franchise_name, Opponent = franchise_name_opponent, `Awardee Score` = franchise_score, `Opponent Score` = opponent_score, Difference = diff_score)

df_weekly_highest_score <- df_scores %>%
  dplyr::group_by(week) %>%
  dplyr::filter(franchise_score == max(franchise_score)) %>%
  dplyr::ungroup() %>% 
  dplyr::mutate(Category = v_category[5]) %>% 
  dplyr::select(Week = week, Category, League = league, Awardee = franchise_name, Opponent = franchise_name_opponent, `Awardee Score` = franchise_score, `Opponent Score` = opponent_score, Difference = diff_score)

df_weekly_lowest_score <- df_scores %>%
  dplyr::group_by(week) %>%
  dplyr::filter(franchise_score == min(franchise_score)) %>%
  dplyr::ungroup() %>% 
  dplyr::mutate(Category = v_category[6]) %>% 
  dplyr::select(Week = week, Category, League = league, Awardee = franchise_name, Opponent = franchise_name_opponent, `Awardee Score` = franchise_score, `Opponent Score` = opponent_score, Difference = diff_score)
  

# collect weekly categories
v_weekly_dfs <- ls(pattern = "df_weekly_")

df_weekly <-mget(v_weekly_dfs) %>%
  purrr::set_names(nm = v_weekly_dfs) %>%
  dplyr::bind_rows() %>%
  dplyr::arrange(dplyr::desc(Week), factor(Category, levels = v_category))


DT::datatable(
  df_weekly,
  rownames = FALSE,
  filter = "top",
  extensions = "Buttons",
  options = list(
    pageLength = 6,
    lengthMenu = c(6, 24, 102),
    dom = "Bfrtpl",
    buttons = c("csv", "excel", "pdf")
  )
)

```

### Total Points

```{r total_points}


df_total_points <- df_scores %>%
  dplyr::group_by(league, franchise_name) %>%
  dplyr::summarize(
    total_pts_for = sum(franchise_score, na.rm = TRUE),
    total_pts_against = sum(opponent_score, na.rm = TRUE)
  ) %>%
  dplyr::select(
    Team = franchise_name,
    `Total Points For` = total_pts_for,
    `Total Points Against` = total_pts_against,
    League = league)

DT::datatable(
  df_total_points,
  rownames = FALSE,
  filter = "top",
  extensions = "Buttons",
  options = list(
    pageLength = 50,
    lengthMenu = c(10, 25, 50),
    dom = "Bfrtpl",
    buttons = c("csv", "excel", "pdf")
  )
)

```

### All Results

A table with results of each matchup for each week.

```{r all_results}
df_scores %>% 
  dplyr::arrange(desc(week), league) %>%
  dplyr::select(
    League = league,
    Week = week,
    Team = franchise_name,
    Score = franchise_score,
    Opponent = franchise_name_opponent,
    `Opp. Score` = opponent_score,
    Result = result,
    Difference = diff_score
  ) %>% 
  DT::datatable(
    .,
    rownames = FALSE,
    filter = "top",
    extensions = "Buttons",
    options = list(
      pageLength = 25,
      lengthMenu = c(25, 50, 100),
      dom = "Bfrtpl",
      buttons = c("csv", "excel", "pdf")
    )
  )
```

### Survival Pool

Three teams are removed from the survival pool each week until there is only one team remaining after Week 16 MNF.

If two teams are tied at the end of a week, the team with the fewest cumulative points to date will be eliminated.

These results should be considered interim until after Sleeper's data provider has processed most of its stat corrections on Tuesdays. See [Sleeper documentation](https://support.sleeper.com/en/articles/2441282-stat-corrections) for more information.

#### Teams Still in Pool

```{r survival_teams}
df_week_list <- df_scores %>% 
  dplyr::filter(week <= 16) %>% 
  dplyr::arrange(week) %>% 
  dplyr::group_by(league, franchise_id) %>% 
  dplyr::mutate(cum_franchise_score = cumsum(franchise_score)) %>% 
  dplyr::ungroup() %>% 
  # dplyr::group_by(week) %>% 
  # dplyr::arrange(franchise_score) %>% 
  # # tidyr::nest(.key = "week_df") %>%
  # dplyr::ungroup() %>%
  split(.$week) 

# get max week in data, i.e., the current week
v_max_week <- length(df_week_list)

# get survival table
df_survived <- df_week_list %>% 
  purrr::accumulate(\(x, d) {
    d %>% 
      dplyr::filter(franchise_name %in% x$franchise_name) %>%
      # to break ties, I add in a _very_ small portion of the cumulative franchise score
      # the effect is that any ties are broken using lowest cumulative score
      dplyr::slice_max(order_by = (franchise_score + .00001*cum_franchise_score), n = -3, with_ties = FALSE)}, .init = df_week_list$`1`) %>%  
  tail(-1) 


# plot survival table
df_survived %>% 
  dplyr::bind_rows() %>% 
  dplyr::arrange(desc(week)) %>% 
  dplyr::select(`Survival Week` = week, League = league, Team = franchise_name, Owner = user_name, Score = franchise_score, `Cumulative Score` = cum_franchise_score) %>% 
DT::datatable(.,
  rownames = FALSE,
  filter = "top",
  extensions = "Buttons",
  options = list(
    pageLength = 12,
    lengthMenu = c(12, 24, 48),
    dom = "Bfrtpl",
    buttons = c("csv", "excel", "pdf")
  )
)



```

#### Teams Eliminated from Pool

```{r eliminated_teams}

# get eliminated table by anti-joining with survival table
df_eliminated <- purrr::map2(.x = df_week_list, .y = df_survived, ~dplyr::anti_join(.x, .y, by = c("league", "week", "franchise_id"))) %>% 
  dplyr::bind_rows() %>% 
  dplyr::group_by(league, franchise_id) %>% 
  dplyr::filter(week == min(week)) %>% 
  dplyr::ungroup() %>% 
  dplyr::arrange(desc(week)) %>% 
  dplyr::select(`Eliminated Week` = week, League = league, Team = franchise_name, Owner = user_name, Score = franchise_score, `Cumulative Score` = cum_franchise_score) 

# plot eliminated table
df_eliminated %>% 
DT::datatable(.,
  rownames = FALSE,
  filter = "top",
  extensions = "Buttons",
  options = list(
    pageLength = 12,
    lengthMenu = c(12, 24, 48),
    dom = "Bfrtpl",
    buttons = c("csv", "excel", "pdf")
  )
)
```

## Transactions

```{r all_transactions}

df_all_transactions <- purrr::map(lts_conn, ~ ff_transactions(.x)) %>%
  dplyr::bind_rows(.id = "league") %>%
  arrange(desc(timestamp), league) %>%
  mutate(
    week = difftime(timestamp, lubridate::ymd("2022-09-06"), units = "weeks") %>% ceiling(.) %>% as.integer(.) %>% if_else(. < 0L, 0L, .)
  ) %>%
  select(league, week, everything())


```

### Free Agent Transactions

A list of free agent transactions.

```{r free_agent}
df_all_transactions %>%
  dplyr::filter(stringr::str_detect(type, "free_agent")) %>%
  dplyr::select(League = league, Week = week, Timestamp = timestamp, Type = type, Description = type_desc, Team = franchise_name, `Player Name` = player_name, Position = pos, `NFL Team` = team) %>%
  DT::datatable(.,
  rownames = FALSE,
  filter = "top",
  extensions = "Buttons",
  options = list(
    pageLength = 50,
    lengthMenu = c(50, 100, 200),
    dom = "Bfrtpl",
    buttons = c("csv", "excel", "pdf")
  )
)

```

### Waiver Bids

A list of FAAB transactions.

```{r waiver_bids}
df_all_transactions %>%
  dplyr::filter(stringr::str_detect(type, "waiver")) %>%
  dplyr::select(League = league, Week = week, Timestamp = timestamp, Type = type, Description = type_desc, Team = franchise_name, `Player Name` = player_name, Position = pos, `NFL Team` = team, `Bid Amount` = bbid_amount, `Waiver Priority` = waiver_priority, Comment = comment) %>%
  DT::datatable(.,
  rownames = FALSE,
  filter = "top",
  extensions = "Buttons",
  options = list(
    pageLength = 50,
    lengthMenu = c(50, 100, 200),
    dom = "Bfrtpl",
    buttons = c("csv", "excel", "pdf")
  )
)

```

### Trades

A list of trade transactions.

```{r trades}
df_all_transactions %>%
  dplyr::filter(stringr::str_detect(type, "trade")) %>%
  dplyr::select(League = league, Week = week, Timestamp = timestamp, Type = type, Description = type_desc, Team = franchise_name, `Player Name` = player_name, Position = pos, `NFL Team` = team, `Bid Amount` = bbid_amount, `Trade Partner` = trade_partner,`Waiver Priority` = waiver_priority, Comment = comment) %>%
  DT::datatable(.,
  rownames = FALSE,
  filter = "top",
  extensions = "Buttons",
  options = list(
    pageLength = 50,
    lengthMenu = c(50, 100, 200),
    dom = "Bfrtpl",
    buttons = c("csv", "excel", "pdf")
  )
)

```
